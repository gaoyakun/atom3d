<?xml version="1.0"?>
<material auto="0">
	<param name="MVP" type="float4x4" default="$MVP_Matrix"/>
	<param name="invTexSize" type="float2"/>
	<param name="inputTexture" type="texture"/>
	<param name="inputSampler" type="sampler2D">
		<filter value="lln"/>
		<texture value="$inputTexture"/>
	</param>
	<code>
    <![CDATA[
		struct VS_INPUT
		{
			float3 position : POSITION;
			float2 tex0 : TEXCOORD0;
		};
		struct VS_OUTPUT
		{
			float4 position : POSITION;
			float2 tex0 : TEXCOORD0;
		};
		
		VS_OUTPUT vs(in VS_INPUT IN)
		{
			VS_OUTPUT OUT;
			OUT.position = mul(float4(IN.position, 1.0), MVP);
			OUT.tex0 = IN.tex0;
			//OUT.tex0 = OUT.tex0 * screenCoordScaleBias.xy + screenCoordScaleBias.zw;
			
			return OUT;
		}

		#if 0
		float3 FxaaPixelShader(float2 pos)
		{
			float2 posM = pos;
			
			float4 rgbyM = tex2D(inputSampler, pos.xy);
			float lumaN = tex2D(inputSampler, pos.xy + float2(+0, -1) * invTexSize).w;
			float lumaW = tex2D(inputSampler, pos.xy + float2(-1, +0) * invTexSize).w;
			float lumaM = rgbyM.w;
			float lumaE = tex2D(inputSampler, pos.xy + float2(+1, +0) * invTexSize).w;
			float lumaS = tex2D(inputSampler, pos.xy + float2(+0, +1) * invTexSize).w;
			float rangeMin = min(lumaM, min(min(lumaN, lumaW), min(lumaS, lumaE)));
			float rangeMax = max(lumaM, max(max(lumaN, lumaW), max(lumaS, lumaE)));
			float range = rangeMax - rangeMin;
			if (range < max(1 / 16.0f, rangeMax / 8))
			{
				return rgbyM.xyz;
			}

			float lumaNW = tex2D(inputSampler, pos.xy + float2(-1, -1) * invTexSize).w;
			float lumaNE = tex2D(inputSampler, pos.xy + float2(+1, -1) * invTexSize).w;
			float lumaSW = tex2D(inputSampler, pos.xy + float2(-1, +1) * invTexSize).w;
			float lumaSE = tex2D(inputSampler, pos.xy + float2(+1, +1) * invTexSize).w;

			float lumaNS = lumaN + lumaS;
			float lumaWE = lumaW + lumaE;
			float subpixRcpRange = 1 / range;
			float subpixNSWE = lumaNS + lumaWE;
			float edgeHorz1 = -2 * lumaM + lumaNS;
			float edgeVert1 = -2 * lumaM + lumaWE;
			
			float lumaNESE = lumaNE + lumaSE;
			float lumaNWNE = lumaNW + lumaNE;
			float edgeHorz2 = -2 * lumaE + lumaNESE;
			float edgeVert2 = -2 * lumaN + lumaNWNE;

			float lumaNWSW = lumaNW + lumaSW;
			float lumaSWSE = lumaSW + lumaSE;
			float edgeHorz4 = abs(edgeHorz1) * 2 + abs(edgeHorz2);
			float edgeVert4 = abs(edgeVert1) * 2 + abs(edgeVert2);
			float edgeHorz3 = -2 * lumaW + lumaNWSW;
			float edgeVert3 = -2 * lumaS + lumaSWSE;
			float edgeHorz = abs(edgeHorz3) + edgeHorz4;
			float edgeVert = abs(edgeVert3) + edgeVert4;
			
			float subpixNWSWNESE = lumaNWSW + lumaNESE;
			float lengthSign = invTexSize.x;
			bool horzSpan = edgeHorz >= edgeVert;
			float subpixA = subpixNSWE * 2 + subpixNWSWNESE;

			if (!horzSpan)
			{
				lumaN = lumaW;
				lumaS = lumaE;
			}
			else
			{
				lengthSign = invTexSize.y;
			}
			float subpixB = subpixA / 12 - lumaM;
			float gradientN = lumaN - lumaM;
			float gradientS = lumaS - lumaM;
			float lumaNN = lumaN + lumaM;
			float lumaSS = lumaS + lumaM;
			bool pairN = abs(gradientN) >= abs(gradientS);
			float gradient = max(abs(gradientN), abs(gradientS));
			if (pairN)
			{
				lengthSign = -lengthSign;
			}
			float subpixC = saturate(abs(subpixB) * subpixRcpRange);

			float2 posB = posM;
			float2 offNP;
			if (!horzSpan)
			{
				offNP.x = 0;
				offNP.y = invTexSize.y;
				posB.x += lengthSign * 0.5f;
			}
			else
			{
				offNP.x = invTexSize.x;
				offNP.y = 0;
				posB.y += lengthSign * 0.5f;
			}

			float2 posN = posB - offNP;
			float2 posP = posB + offNP;
			float subpixD = -2 * subpixC + 3;
			float lumaEndN = tex2D(inputSampler, posN).w;
			float subpixE = subpixC * subpixC;
			float lumaEndP = tex2D(inputSampler, posP).w;

			if (!pairN)
			{
				lumaNN = lumaSS;
			}
			float gradientScaled = gradient / 4;
			float lumaMM = lumaM - lumaNN * 0.5f;
			float subpixF = subpixD * subpixE;
			bool lumaMLTZero = lumaMM < 0;

			lumaEndN -= lumaNN * 0.5f;
			lumaEndP -= lumaNN * 0.5f;
			bool doneN = abs(lumaEndN) >= gradientScaled;
			bool doneP = abs(lumaEndP) >= gradientScaled;
			if (!doneN)
			{
				posN -= offNP * 1.5f;
			}
			bool doneNP = (!doneN) || (!doneP);
			if (!doneP)
			{
				posP += offNP * 1.5f;
			}

			if (doneNP)
			{
				if (!doneN)
				{
					lumaEndN = tex2D(inputSampler, posN.xy).w;
					lumaEndN = lumaEndN - lumaNN * 0.5f;
				}
				if (!doneP)
				{
					lumaEndP = tex2D(inputSampler, posP.xy).w;
					lumaEndP = lumaEndP - lumaNN * 0.5f;
				}
				doneN = abs(lumaEndN) >= gradientScaled;
				doneP = abs(lumaEndP) >= gradientScaled;
				if (!doneN)
				{
					posN -= offNP * 2.0;
				}
				doneNP = (!doneN) || (!doneP);
				if (!doneP)
				{
					posP += offNP * 2.0;
				}
				if (doneNP)
				{
					if (!doneN)
					{
						lumaEndN = tex2D(inputSampler, posN.xy).w;
						lumaEndN = lumaEndN - lumaNN * 0.5f;
					}
					if (!doneP)
					{
						lumaEndP = tex2D(inputSampler, posP.xy).w;
						lumaEndP = lumaEndP - lumaNN * 0.5f;
					}
					doneN = abs(lumaEndN) >= gradientScaled;
					doneP = abs(lumaEndP) >= gradientScaled;
					if (!doneN)
					{
						posN -= offNP * 2.0;
					}
					doneNP = (!doneN) || (!doneP);
					if (!doneP)
					{
						posP += offNP * 2.0;
					}
					if (doneNP)
					{
						if (!doneN)
						{
							lumaEndN = tex2D(inputSampler, posN.xy).w;
							lumaEndN = lumaEndN - lumaNN * 0.5f;
						}
						if (!doneP)
						{
							lumaEndP = tex2D(inputSampler, posP.xy).w;
							lumaEndP = lumaEndP - lumaNN * 0.5f;
						}
						doneN = abs(lumaEndN) >= gradientScaled;
						doneP = abs(lumaEndP) >= gradientScaled;
						if (!doneN)
						{
							posN -= offNP * 4.0;
						}
						doneNP = (!doneN) || (!doneP);
						if (!doneP)
						{
							posP += offNP * 4.0;
						}
						if (doneNP)
						{
							if (!doneN)
							{
								lumaEndN = tex2D(inputSampler, posN.xy).w;
								lumaEndN = lumaEndN - lumaNN * 0.5f;
							}
							if (!doneP)
							{
								lumaEndP = tex2D(inputSampler, posP.xy).w;
								lumaEndP = lumaEndP - lumaNN * 0.5f;
							}
							doneN = abs(lumaEndN) >= gradientScaled;
							doneP = abs(lumaEndP) >= gradientScaled;
							if (!doneN)
							{
								posN -= offNP * 2.0;
							}
							if (!doneP)
							{
								posP += offNP * 2.0;
							}
						}
					}
				}
			}
			
			float dstN = posM.x - posN.x;
			float dstP = posP.x - posM.x;
			if (!horzSpan)
			{
				dstN = posM.y - posN.y;
				dstP = posP.y - posM.y;
			}

			bool goodSpanN = (lumaEndN < 0) != lumaMLTZero;
			float spanLength = (dstP + dstN);
			bool goodSpanP = (lumaEndP < 0) != lumaMLTZero;
			float spanLengthRcp = 1 / spanLength;

			bool directionN = dstN < dstP;
			float dst = min(dstN, dstP);
			bool goodSpan = directionN ? goodSpanN : goodSpanP;
			float subpixG = subpixF * subpixF;
			float pixelOffset = dst * -spanLengthRcp + 0.5f;
			float subpixH = subpixG * 0.75f;

			float pixelOffsetGood = goodSpan ? pixelOffset : 0;
			float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);
			if (!horzSpan)
			{
				posM.x += pixelOffsetSubpix * lengthSign;
			}
			else
			{
				posM.y += pixelOffsetSubpix * lengthSign;
			}

			return tex2D(inputSampler, posM).xyz;
		}
		
		#else
		
		float getLuma( float3 vSample )
		{
			return dot( vSample.rgb, float3(0.299, 0.587, 0.114) );
		}
		float4 FxaaPixelShader(float2 pos)
		{
			float2 posM = pos;
			
			float4 rgbyM = tex2D(inputSampler, pos.xy);
			float lumaM = getLuma(rgbyM.rgb);
			
			float lumaN = getLuma( tex2D(inputSampler, pos.xy + float2(+0, -1) * invTexSize).rgb );
			float lumaW = getLuma( tex2D(inputSampler, pos.xy + float2(-1, +0) * invTexSize).rgb );
			
						
			float lumaE = getLuma( tex2D(inputSampler, pos.xy + float2(+1, +0) * invTexSize).rgb );
			float lumaS = getLuma( tex2D(inputSampler, pos.xy + float2(+0, +1) * invTexSize).rgb );
			
			float rangeMin = min(lumaM, min(min(lumaN, lumaW), min(lumaS, lumaE)));
			float rangeMax = max(lumaM, max(max(lumaN, lumaW), max(lumaS, lumaE)));
			float range = rangeMax - rangeMin;
			if (range < max(1 / 16.0f, rangeMax / 8))
			{
				return rgbyM.xyzw;
			}

			float lumaNW = getLuma( tex2D(inputSampler, pos.xy + float2(-1, -1) * invTexSize).rgb );
			float lumaNE = getLuma( tex2D(inputSampler, pos.xy + float2(+1, -1) * invTexSize).rgb );
			float lumaSW = getLuma( tex2D(inputSampler, pos.xy + float2(-1, +1) * invTexSize).rgb );
			float lumaSE = getLuma( tex2D(inputSampler, pos.xy + float2(+1, +1) * invTexSize).rgb );

			float lumaNS = lumaN + lumaS;
			float lumaWE = lumaW + lumaE;
			
			float subpixRcpRange = 1 / range;
			float subpixNSWE = lumaNS + lumaWE;
			
			float edgeHorz1 = -2 * lumaM + lumaNS;
			float edgeVert1 = -2 * lumaM + lumaWE;
			
			float lumaNESE = lumaNE + lumaSE;
			float lumaNWNE = lumaNW + lumaNE;
			float edgeHorz2 = -2 * lumaE + lumaNESE;
			float edgeVert2 = -2 * lumaN + lumaNWNE;

			float lumaNWSW = lumaNW + lumaSW;
			float lumaSWSE = lumaSW + lumaSE;
			float edgeHorz4 = abs(edgeHorz1) * 2 + abs(edgeHorz2);
			float edgeVert4 = abs(edgeVert1) * 2 + abs(edgeVert2);
			float edgeHorz3 = -2 * lumaW + lumaNWSW;
			float edgeVert3 = -2 * lumaS + lumaSWSE;
			float edgeHorz = abs(edgeHorz3) + edgeHorz4;
			float edgeVert = abs(edgeVert3) + edgeVert4;
			
			float subpixNWSWNESE = lumaNWSW + lumaNESE;
			float lengthSign = invTexSize.x;
			bool horzSpan = edgeHorz >= edgeVert;
			float subpixA = subpixNSWE * 2 + subpixNWSWNESE;

			if (!horzSpan)
			{
				lumaN = lumaW;
				lumaS = lumaE;
			}
			else
			{
				lengthSign = invTexSize.y;
			}
			float subpixB = subpixA / 12 - lumaM;
			float gradientN = lumaN - lumaM;
			float gradientS = lumaS - lumaM;
			float lumaNN = lumaN + lumaM;
			float lumaSS = lumaS + lumaM;
			bool pairN = abs(gradientN) >= abs(gradientS);
			float gradient = max(abs(gradientN), abs(gradientS));
			if (pairN)
			{
				lengthSign = -lengthSign;
			}
			float subpixC = saturate(abs(subpixB) * subpixRcpRange);

			float2 posB = posM;
			float2 offNP;
			if (!horzSpan)
			{
				offNP.x = 0;
				offNP.y = invTexSize.y;
				posB.x += lengthSign * 0.5f;
			}
			else
			{
				offNP.x = invTexSize.x;
				offNP.y = 0;
				posB.y += lengthSign * 0.5f;
			}

			float2 posN = posB - offNP;
			float2 posP = posB + offNP;
			float subpixD = -2 * subpixC + 3;
			float lumaEndN = getLuma( tex2D(inputSampler, posN).rgb );
			float subpixE = subpixC * subpixC;
			float lumaEndP = getLuma( tex2D(inputSampler, posP).rgb );

			if (!pairN)
			{
				lumaNN = lumaSS;
			}
			float gradientScaled = gradient / 4;
			float lumaMM = lumaM - lumaNN * 0.5f;
			float subpixF = subpixD * subpixE;
			bool lumaMLTZero = lumaMM < 0;

			lumaEndN -= lumaNN * 0.5f;
			lumaEndP -= lumaNN * 0.5f;
			bool doneN = abs(lumaEndN) >= gradientScaled;
			bool doneP = abs(lumaEndP) >= gradientScaled;
			if (!doneN)
			{
				posN -= offNP * 1.5f;
			}
			bool doneNP = (!doneN) || (!doneP);
			if (!doneP)
			{
				posP += offNP * 1.5f;
			}

			if (doneNP)
			{
				if (!doneN)
				{
					lumaEndN = getLuma( tex2D(inputSampler, posN.xy).rgb );
					lumaEndN = lumaEndN - lumaNN * 0.5f;
				}
				if (!doneP)
				{
					lumaEndP = getLuma( tex2D(inputSampler, posP.xy).rgb );
					lumaEndP = lumaEndP - lumaNN * 0.5f;
				}
				doneN = abs(lumaEndN) >= gradientScaled;
				doneP = abs(lumaEndP) >= gradientScaled;
				if (!doneN)
				{
					posN -= offNP * 2.0;
				}
				doneNP = (!doneN) || (!doneP);
				if (!doneP)
				{
					posP += offNP * 2.0;
				}
				if (doneNP)
				{
					if (!doneN)
					{
						lumaEndN = getLuma( tex2D(inputSampler, posN.xy).rgb );
						lumaEndN = lumaEndN - lumaNN * 0.5f;
					}
					if (!doneP)
					{
						lumaEndP = getLuma( tex2D(inputSampler, posP.xy).rgb );
						lumaEndP = lumaEndP - lumaNN * 0.5f;
					}
					doneN = abs(lumaEndN) >= gradientScaled;
					doneP = abs(lumaEndP) >= gradientScaled;
					if (!doneN)
					{
						posN -= offNP * 2.0;
					}
					doneNP = (!doneN) || (!doneP);
					if (!doneP)
					{
						posP += offNP * 2.0;
					}
					if (doneNP)
					{
						if (!doneN)
						{
							lumaEndN = getLuma( tex2D(inputSampler, posN.xy).rgb );
							lumaEndN = lumaEndN - lumaNN * 0.5f;
						}
						if (!doneP)
						{
							lumaEndP = getLuma( tex2D(inputSampler, posP.xy).rgb );
							lumaEndP = lumaEndP - lumaNN * 0.5f;
						}
						doneN = abs(lumaEndN) >= gradientScaled;
						doneP = abs(lumaEndP) >= gradientScaled;
						if (!doneN)
						{
							posN -= offNP * 4.0;
						}
						doneNP = (!doneN) || (!doneP);
						if (!doneP)
						{
							posP += offNP * 4.0;
						}
						if (doneNP)
						{
							if (!doneN)
							{
								lumaEndN = getLuma( tex2D(inputSampler, posN.xy).rgb );
								lumaEndN = lumaEndN - lumaNN * 0.5f;
							}
							if (!doneP)
							{
								lumaEndP = getLuma( tex2D(inputSampler, posP.xy).rgb );
								lumaEndP = lumaEndP - lumaNN * 0.5f;
							}
							doneN = abs(lumaEndN) >= gradientScaled;
							doneP = abs(lumaEndP) >= gradientScaled;
							if (!doneN)
							{
								posN -= offNP * 2.0;
							}
							if (!doneP)
							{
								posP += offNP * 2.0;
							}
						}
					}
				}
			}
			
			float dstN = posM.x - posN.x;
			float dstP = posP.x - posM.x;
			if (!horzSpan)
			{
				dstN = posM.y - posN.y;
				dstP = posP.y - posM.y;
			}

			bool goodSpanN = (lumaEndN < 0) != lumaMLTZero;
			float spanLength = (dstP + dstN);
			bool goodSpanP = (lumaEndP < 0) != lumaMLTZero;
			float spanLengthRcp = 1 / spanLength;

			bool directionN = dstN < dstP;
			float dst = min(dstN, dstP);
			bool goodSpan = directionN ? goodSpanN : goodSpanP;
			float subpixG = subpixF * subpixF;
			float pixelOffset = dst * -spanLengthRcp + 0.5f;
			float subpixH = subpixG * 0.75f;

			float pixelOffsetGood = goodSpan ? pixelOffset : 0;
			float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);
			if (!horzSpan)
			{
				posM.x += pixelOffsetSubpix * lengthSign;
			}
			else
			{
				posM.y += pixelOffsetSubpix * lengthSign;
			}

			return tex2D(inputSampler, posM).xyzw;
		}
		
		#endif
		
		float4 ps (in VS_OUTPUT IN): COLOR
		{
		#if 0
			return float4(FxaaPixelShader(IN.tex0.xy), 1.f);
		#else
			return FxaaPixelShader(IN.tex0.xy);
		#endif
		}
		
	]]></code>
	<effect name="default">
		<pass>
			<streamdefine>
				<stream semantec="position" type="float3"/>
				<stream semantec="texcoord0" type="float2"/>
			</streamdefine>
			<rasterizer_state>
				<cullmode value="none"/>
			</rasterizer_state>
			<depth_state>
				<zfunc value="always" />
				<zwrite value="false" />
			</depth_state>
			<vertexshader entry="vs" target="vs_3_0"/>
			<pixelshader entry="ps" target="ps_3_0"/>
		</pass>
	</effect>
</material>
