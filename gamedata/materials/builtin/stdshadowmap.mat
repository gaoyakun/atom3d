<?xml version="1.0"?>
<material auto="0">
  <include filename="/materials/builtin/deferredrendering.inc"/>
  <define prereq_type="DeviceCaps" prereq_name="ATI_Fetch4" name="USE_FETCH4_ATI" value="0"/>
  <define prereq_type="DeviceCaps" prereq_name="Hardware_PCF" name="USE_HARDWARE_PCF" value="0"/>
  <param name="lightViewProj" type="float4x4"/>
  <param name="shadowDistance" type="float"/>
  <param name="bias" type="float" default="0.0001"/>
  <param name="sceneScale" type="float" default="0.2"/>
  <param name="lightSize" type="float" default="0.05"/>
  <param name="shadowMap" type="texture"/>
  <param name="fadeParam" type="float2"/>
  <param name="mapParam" type="float2"/>
  <param name="lightDirView" type="float3"/>
  <param name="shadowBlur" type="float" default="0.2"/>
  <param name="shadowDensity" type="float" default="1.0"/>
  <param name="shadowMapSampler" type="sampler2D">
    <texture value="$shadowMap"/>
    <filter value="ppn"/>
    <addressu value="border"/>
    <addressv value="border"/>
    <bordercolor value="1,1,1,1"/>
    <srgb value="false"/>
  </param>
  <param name="shadowMapSampler_hardware_pcf" type="sampler2D">
    <texture value="$shadowMap"/>
    <filter value="lln"/>
    <addressu value="clamp"/>
    <addressv value="clamp"/>
    <srgb value="false"/>
  </param>
  <param name="rotationTexture" type="texture"/>
  <param name="rotationSampler" type="sampler2D">
    <texture value="$rotationTexture"/>
    <filter value="ppn"/>
    <addressu value="wrap"/>
    <addressv value="wrap"/>
    <srgb value="false"/>
  </param>
  <code>
    <![CDATA[
	struct VS_INPUT
	{
		float3 position: POSITION;
		float2 uv: TEXCOORD0;
	};
	struct VS_OUTPUT
	{
		float4 position: POSITION;
		float2 uv: TEXCOORD0;
		float3 eyedir: TEXCOORD1;
	};
	float findBlocker(float2 uv, float LP, float searchWidth, float numSamples)
	{
		float stepSize = 2 * searchWidth / numSamples;
		uv = uv - float2(searchWidth, searchWidth);
		float blockerSum = 0;
		float receiver = LP;
		float blockerCount = 0;
		float foundBlocker = 0;
		for (int i=0; i<numSamples; i++) {
			for (int j=0; j<numSamples; j++) {
				float shadMapDepth = tex2D(shadowMapSampler, uv + float2(i*stepSize,j*stepSize)).x;
				if (shadMapDepth < receiver) {
					blockerSum += shadMapDepth;
					blockerCount++;
					foundBlocker = 1;
				}
			}
		}
		float result;
		if (foundBlocker == 0) {
			result = 999;
		}
		else {
			result = blockerSum / blockerCount;
		}
		return result;
	}
	float estimatePenumbra(float2 uv, float LP, float blocker)
	{
		float receiver = LP;
		float penumbra = (receiver - blocker) * lightSize / blocker;
		return penumbra;
	}
	
	/*
	float2 poissonkernel25[25] =
	{
		{-0.978698, -0.0884121},
		{-0.841121, 0.521165},
		{-0.71746, -0.50322},
		{-0.702933, 0.903134},
		{-0.663198, 0.15482},
		{-0.495102, -0.232887},
		{-0.364238, -0.961791},
		{-0.345866, -0.564379},
		{-0.325663, 0.64037},
		{-0.182714, 0.321329},
		{-0.142613, -0.0227363},
		{-0.0564287, -0.36729},
		{-0.0185858, 0.918882},
		{0.0381787, -0.728996},
		{0.16599, 0.093112},
		{0.253639, 0.719535},
		{0.369549, -0.655019},
		{0.423627, 0.429975},
		{0.530747, -0.364971},
		{0.566027, -0.940489},
		{0.639332, 0.0284127},
		{0.652089, 0.669668},
		{0.773797, 0.345012},
		{0.968871, 0.840449},
		{0.991882, -0.657338},
	};

	float2 poissonkernel32[32] =
	{
		{-0.975402, -0.0711386},
		{-0.920347, -0.41142},
		{-0.883908, 0.217872},
		{-0.884518, 0.568041},
		{-0.811945, 0.90521},
		{-0.792474, -0.779962},
		{-0.614856, 0.386578},
		{-0.580859, -0.208777},
		{-0.53795, 0.716666},
		{-0.515427, 0.0899991},
		{-0.454634, -0.707938},
		{-0.420942, 0.991272},
		{-0.261147, 0.588488},
		{-0.211219, 0.114841},
		{-0.146336, -0.259194},
		{-0.139439, -0.888668},
		{0.0116886, 0.326395},
		{0.0380566, 0.625477},
		{0.0625935, -0.50853},
		{0.125584, 0.0469069},
		{0.169469, -0.997253},
		{0.320597, 0.291055},
		{0.359172, -0.633717},
		{0.435713, -0.250832},
		{0.507797, -0.916562},
		{0.545763, 0.730216},
		{0.56859, 0.11655},
		{0.743156, -0.505173},
		{0.736442, -0.189734},
		{0.843562, 0.357036},
		{0.865413, 0.763726},
		{0.872005, -0.927},
	};

	float2 poissonkernel64[64] =
	{
		{-0.934812, 0.366741},
		{-0.918943, -0.0941496},
		{-0.873226, 0.62389},
		{-0.8352, 0.937803},
		{-0.822138, -0.281655},
		{-0.812983, 0.10416},
		{-0.786126, -0.767632},
		{-0.739494, -0.535813},
		{-0.681692, 0.284707},
		{-0.61742, -0.234535},
		{-0.601184, 0.562426},
		{-0.607105, 0.847591},
		{-0.581835, -0.00485244},
		{-0.554247, -0.771111},
		{-0.483383, -0.976928},
		{-0.476669, -0.395672},
		{-0.439802, 0.362407},
		{-0.409772, -0.175695},
		{-0.367534, 0.102451},
		{-0.35313, 0.58153},
		{-0.341594, -0.737541},
		{-0.275979, 0.981567},
		{-0.230811, 0.305094},
		{-0.221656, 0.751152},
		{-0.214393, -0.0592364},
		{-0.204932, -0.483566},
		{-0.183569, -0.266274},
		{-0.123936, -0.754448},
		{-0.0859096, 0.118625},
		{-0.0610675, 0.460555},
		{-0.0234687, -0.962523},
		{-0.00485244, -0.373394},
		{0.0213324, 0.760247},
		{0.0359813, -0.0834071},
		{0.0877407, -0.730766},
		{0.14597, 0.281045},
		{0.18186, -0.529649},
		{0.188208, -0.289529},
		{0.212928, 0.063509},
		{0.23661, 0.566027},
		{0.266579, 0.867061},
		{0.320597, -0.883358},
		{0.353557, 0.322733},
		{0.404157, -0.651479},
		{0.410443, -0.413068},
		{0.413556, 0.123325},
		{0.46556, -0.176183},
		{0.49266, 0.55388},
		{0.506333, 0.876888},
		{0.535875, -0.885556},
		{0.615894, 0.0703452},
		{0.637135, -0.637623},
		{0.677236, -0.174291},
		{0.67626, 0.7116},
		{0.686331, -0.389935},
		{0.691031, 0.330729},
		{0.715629, 0.999939},
		{0.8493, -0.0485549},
		{0.863582, -0.85229},
		{0.890622, 0.850581},
		{0.898068, 0.633778},
		{0.92053, -0.355693},
		{0.933348, -0.62981},
		{0.95294, 0.156896},
	};*/

	float PCF_Filter(float4 uv, float LP, float filterWidth, float numSamples, float2 screenUV)
	{
#if 1
	
		float2 poissonkernel9[9] = {
			float2(-0.2028415f, 0.6236906f),
			float2(0.462169f, 0.4407015f),
			float2(-0.6259778f, -0.1907321f),
			float2(-0.8198389f, 0.3856189f),
			float2(-0.1178309f, 0.001174102f),
			float2(0.3030488f, -0.4424573f),
			float2(0.7848949f, 0.002913898f),
			float2(0.7771053f, -0.6257233f),
			float2(-0.2808524f, -0.6636516f)
		};
	
	/*
		float2 poissonkernel16[16] =
		{
			{-0.94201624, -0.39906216},
			{0.94558609, -0.76890725},
			{-0.094184101, -0.92938870},
			{0.34495938, 0.29387760},
			{-0.91588581, 0.45771432},
			{-0.81544232, -0.87912464},
			{-0.38277543, 0.27676845},
			{0.97484398, 0.75648379},
			{0.44323325, -0.97511554},
			{0.53742981, -0.47373420},
			{-0.26496911, -0.41893023},
			{0.79197514, 0.19090188},
			{-0.24188840, 0.99706507},
			{-0.81409955, 0.91437590},
			{0.19984126, 0.78641367},
			{0.14383161, -0.14100790}
		};
	*/
	
		float sum = 0;
		screenUV *= mapParam.y;
		float2 rot = tex2D(rotationSampler, screenUV).rg * 2.f - 1.f;
		float kernelSize = 2.5f;
		int sample_num = 9;
		for (int i=0; i<sample_num; i++)
		{
			float2 poissonOffset = float2(
				rot.x * poissonkernel9[i].x - rot.y * poissonkernel9[i].y,
				rot.y * poissonkernel9[i].x + rot.x * poissonkernel9[i].y
			);
			//float2 poissonOffset = poissonkernel9[i];
			
		//#define USE_FETCH4_ATI 0
		#if USE_FETCH4_ATI
			float4 tex = uv;
			tex.xy += poissonOffset * mapParam.x * kernelSize;
			float4 shadMapDepth = tex2Dproj(shadowMapSampler, tex);
			float4 shad = float4(LP,LP,LP,LP) <= shadMapDepth;
			sum += dot( shad,float4(0.25,0.25,0.25,0.25) );
		#else
			float2 tex = uv.xy + poissonOffset * mapParam.x;
			float shadMapDepth = tex2D(shadowMapSampler, tex).x;
			float4 shad = LP <= shadMapDepth;
			sum += shad;
		#endif
		}
		return sum / sample_num;
#else
		//return LP < tex2D(shadowMapSampler, uv);
		float stepSize = mapParam.x;
		float sum = 0;
		for (int i=-1; i<=1; i++) {
			for (int j=-1; j<=1; j++) {
				float shadMapDepth = tex2D(shadowMapSampler, uv + float2(i*stepSize,j*stepSize)).x;
				float shad = LP <= shadMapDepth;
				sum += shad;
			}
		}
		return sum / 9;
#endif
	}
	
	float ShadowContribution (float4 lightTexCoord, float DistanceToLight, float2 screenUV)
	{
		//float shadMapDepth = tex2D(shadowMapSampler, lightTexCoord).x;
		//return DistanceToLight < shadMapDepth;
		float samples = 5;
		float shadowed = PCF_Filter(lightTexCoord, DistanceToLight, 0.5f, samples, screenUV);
		return shadowed;
	}
	
	//--- wangjian added for hardware PCF ---//
	float PCF_Filter_hardware(float4 uv, float LP, float filterWidth, float numSamples, float2 screenUV)
	{
#if 1
		const float2 poissonkernel9[9] = {
			float2(-0.2028415f, 0.6236906f),
			float2(0.462169f, 0.4407015f),
			float2(-0.6259778f, -0.1907321f),
			float2(-0.8198389f, 0.3856189f),
			float2(-0.1178309f, 0.001174102f),
			float2(0.3030488f, -0.4424573f),
			float2(0.7848949f, 0.002913898f),
			float2(0.7771053f, -0.6257233f),
			float2(-0.2808524f, -0.6636516f)
		};
	/*
		const float2 poissonkernel16[16] =
		{
			{-0.94201624, -0.39906216},
			{0.94558609, -0.76890725},
			{-0.094184101, -0.92938870},
			{0.34495938, 0.29387760},
			{-0.91588581, 0.45771432},
			{-0.81544232, -0.87912464},
			{-0.38277543, 0.27676845},
			{0.97484398, 0.75648379},
			{0.44323325, -0.97511554},
			{0.53742981, -0.47373420},
			{-0.26496911, -0.41893023},
			{0.79197514, 0.19090188},
			{-0.24188840, 0.99706507},
			{-0.81409955, 0.91437590},
			{0.19984126, 0.78641367},
			{0.14383161, -0.14100790}
		};
	*/
		float sum = 0;
		screenUV *= mapParam.y;
		float2 rot = tex2D(rotationSampler, screenUV).rg * 2.f - 1.f;
		float kernelSize = shadowBlur;
		const int sample_num = 9;
		const float inv_sample_num = 1.0 / 9.0;
		float2 poissonOffset;
		for ( int i = 0; i < sample_num; i++ )
		{
			poissonOffset = float2(
				rot.x * poissonkernel9[i].x - rot.y * poissonkernel9[i].y,
				rot.y * poissonkernel9[i].x + rot.x * poissonkernel9[i].y
			);			
			float4 tex = uv;
			tex.xy += poissonOffset * mapParam.x * kernelSize;
			sum += tex2Dproj(shadowMapSampler_hardware_pcf, tex).x;
		}
		return sum * inv_sample_num;
#else
		//return LP < tex2D(shadowMapSampler, uv);
		float stepSize = mapParam.x;
		float sum = 0;
		for (int i=-1; i<=1; i++) {
			for (int j=-1; j<=1; j++) {
				float shadMapDepth = tex2D(shadowMapSampler, uv + float2(i*stepSize,j*stepSize)).x;
				float shad = LP <= shadMapDepth;
				sum += shad;
			}
		}
		return sum / 9;
#endif
	}
	float ShadowContribution_hardware_pcf (float4 lightTexCoord, float DistanceToLight, float2 screenUV)
	{
		//float shadMapDepth = tex2D(shadowMapSampler, lightTexCoord).x;
		//return DistanceToLight < shadMapDepth;
		//float samples = 5;
		float shadowed = PCF_Filter_hardware(lightTexCoord, DistanceToLight, 0.5f, 9, screenUV);
		return shadowed;
	}
	//---------------------------------------//
	
	
	struct PS_OUTPUT
	{
		float4 color: COLOR0;
	};
	VS_OUTPUT vs (in VS_INPUT IN)
	{
		VS_OUTPUT output;
		output.position = float4(IN.position, 1.0);
		output.uv = IN.uv;
		output.eyedir = getEyeDirFromClipSpace (output.position);
		return output;
	}    
	PS_OUTPUT ps (in VS_OUTPUT IN)
	{
		PS_OUTPUT output;
		float3 eyePos = getEyePosFromTexCoord(IN.uv, IN.eyedir);
		float factor = min(eyePos.z * shadowDistance, 1.0);
		float4 shadowTex = mul(float4(eyePos, 1.0), lightViewProj);
		
	#if USE_HARDWARE_PCF
		shadowTex.z = min(shadowTex.z-bias * 0.1, 1.0);
		float shadow = ShadowContribution_hardware_pcf (shadowTex, min(shadowTex.z-bias, 1.0), IN.uv);
	#else
		shadowTex /= shadowTex.w;
		float shadow = ShadowContribution (shadowTex, min(shadowTex.z-bias * 0.5, 1.0), IN.uv);
	#endif
		
		//float shadow = ShadowContribution (shadowTex.xy, min(shadowTex.z-bias * 0.5, 1.0), IN.uv);
		output.color = float4( shadow, 0.0, 0.0, saturate( min( shadowDensity,(fadeParam.x-length(eyePos))*fadeParam.y) ) );
		//output.color = shadowTex.z;
		return output;
	}
	
	//---- wangjian added ---//
	PS_OUTPUT ps_hardware_pcf (in VS_OUTPUT IN)
	{
		PS_OUTPUT output;
		float3 eyePos = getEyePosFromTexCoord(IN.uv, IN.eyedir);
		float factor = min(eyePos.z * shadowDistance, 1.0);
		float4 shadowTex = mul(float4(eyePos, 1.0), lightViewProj);
		
		//float halflambertScale;
		//float3 normal = getNormalAndSpecularPower(IN.uv, halflambertScale).rgb;
		
		//float bias_ext = bias;
		
		//float NdotL = saturate( dot( normal,lightDirView ) );
		//if( NdotL < 0.1f )
		//	bias_ext = 10000.0f;
		
		//float2 ddist = float2( ddx( shadowTex.z ), ddy( shadowTex.z ) );
		//bias_ext += dot(abs(ddist),1) * 100.0f;
		
		//bias_ext = ( 1.0 - smoothstep( 0.2, 0.5, NdotL ) ) * 20 * bias + bias;
		//bias_ext = ( 1 - step( 0.2, NdotL ) ) * 10 * bias + bias;
		//float bias_ext = temp * 5 * bias + bias;
		
		shadowTex.z = min(shadowTex.z - bias * 0.05, 1.0);
		float shadow = ShadowContribution_hardware_pcf (shadowTex, 0, IN.uv);
		
		output.color = float4(shadow, 0.0, 0.0, saturate( min( shadowDensity, (fadeParam.x-length(eyePos))*fadeParam.y) ) );
		
		//output.color = shadowTex.z;
		
		//output.color.a *=  1- NdotL;
		
		return output;
	}
	//-----------------------//
    ]]>
  </code>
	
  <effect name="default">
    <pass>
      <streamdefine>
        <stream semantec="position"/>
        <stream semantec="texcoord0" type="float2"/>
      </streamdefine>
      <alphablend_state>
        <enable value="true"/>
        <srcblend value="srcalpha"/>
        <destblend value="invsrcalpha"/>
      </alphablend_state>
      <rasterizer_state>
        <cullmode value="none"/>
      </rasterizer_state>
      <depth_state>
		<zfunc value="always"/>
		<zwrite value="false"/>
      </depth_state>
      <vertexshader entry="vs" target="vs_3_0"/>
      <pixelshader entry="ps" target="ps_3_0" />
    </pass>
  </effect>
  <effect name="hardware_pcf">
    <pass>
      <streamdefine>
        <stream semantec="position"/>
        <stream semantec="texcoord0" type="float2"/>
      </streamdefine>
      <alphablend_state>
        <enable value="true"/>
        <srcblend value="srcalpha"/>
        <destblend value="invsrcalpha"/>
      </alphablend_state>
      <rasterizer_state>
        <cullmode value="none"/>
      </rasterizer_state>
      <depth_state>
		<zfunc value="always"/>
		<zwrite value="false"/>
      </depth_state>
      <vertexshader entry="vs" target="vs_3_0"/>
      <pixelshader entry="ps_hardware_pcf" target="ps_3_0" />
    </pass>
  </effect>
</material>

