<?xml version="1.0"?>
<material auto="1">	
	<include filename="/materials/builtin/deferredrendering.inc"/>
	
	<include filename="/materials/builtin/forward/forwardrendering.inc" />		<!-- forward rendering -->
	
	
	<param name="MVP" type="float4x4" default="$MVP_Matrix" />
	<param name="View" type="float4x4" default="$View_Matrix" />
	<param name="WorldView" type="float4x4" default="$WorldView_Matrix" />
	<param name="World" type="float4x4" default="$World_Matrix" />
	
	<param name="mViewProj" type="float4x4" default="$ViewProjection_Matrix" />
	
	<!--
	<param name="disableCaustics" type="int" default="0" editortype="bool"/>
	<param name="enableFoam" type="int" default="0" editortype="bool"/>
	<param name="enableRainLayer" type="int" default="0" editortype="bool"/>
	-->
	
	<param name="Opacity" type="float" default="0.05" editortype="none" />
	<param name="SurfaceColor" type="float4" default="0.008, 0.52, 0.7, 1.0" editortype="color" />
	<param name="DepthColor" type="float4" default="0.004, 0.002, 0.145, 1.0" editortype="color" />
	<param name="ReflectColor" type="float4" default="0.004, 0.6, 0.9, 1.0" editortype="color" />
	<param name="Extinction" type="float4" default="4.5,75.0,300, 1.0" editortype="none" />
	<param name="TextureScale" type="float4" default="10.0, 10.0, 20.0, 20.0" editortype="none" />
	<param name="shininess" type="float" default="0.7" editortype="none" />
	<param name="normalScale" type="float" default="6" editortype="none" />
	<param name="distortion" type="float" default="0.1" editortype="none" />
	<param name="LightDir" type="float3" default="$SunLightDir" />
	<param name="NormalMap1" type="texture" editortype="none" />
	<param name="NormalMap2"  type="texture" editortype="none" />
	
	<!--
	<param name="WaveMap"  type="texture" editortype="none" />
	<param name="CausticsMap"  type="texture" editortype="none" />
	-->
	
	<param name="CausticsSequenceMap" type="texture" default="$Deferred_WaterCausticsTexture" />
	<param name="Time" type="float" default="$TimeInSecond" />
	<param name="Velocity" type="float4" default="0.003, 0.003, 0.001, 0.001" editortype="none" />
	<param name="EyePos" type="float3" default="$WorldSpaceEye" />
	<param name="CausticParam" type="float4" default="30000.0, 1.0, 5.0, 3.0" editortype="none" />
	<param name="AnimCoeffs" type="float4" default="0.00024, 0.0002, 0.05, 0.02" editortype="none" />
	
	
	<param name="FoamParams" type="float4" default="12.0,1.0,1.0,1.0" editortype="none" />
	<param name="FoamColor" type="float4" default="1.0,1.0,1.0,1.0" editortype="color" />
	
	<param name="ReflectScale" type="float" default="1.0" editortype="none" />
	<param name="EnvMapGlobal"  type="texture" editortype="none" />
	
	<param name="GlossMap"  type="texture" editortype="none" />
	<param name="FoamMap"  type="texture" editortype="none" />
	
	
	<param name="rainPuddleIntensity" type="float" default="1.0" editortype="none"/>
	<param name="rainPuddleParams" type="float4" default="$RainLayer_PuddleParams"/>
	<param name="rainLayerParams" type="float4" default="$RainLayer_LayerParams"/>
	<param name="rainWavesTexture" type="texture" default="$RainLayer_PuddleTexture"/>
	<param name="rainWavesSampler" type="sampler2D">
		<texture value="$rainWavesTexture"/>
		<filter value="lln"/>
		<addressu value="wrap"/>
		<addressv value="wrap"/>
	</param>
	
	<param name="ShadedSceneMap"  type="texture" default="$Deferred_ShadedSceneTexture" />
	<param name="ShadedSceneSampler" type="sampler2D">
		<texture value="$ShadedSceneMap"/>
		<filter value="ppn"/>
		<addressu value="clamp" />
        <addressv value="clamp" />
		<srgb value="true"/>
	</param>
	
	<param name="NormalSampler1" type="sampler2D">
		<texture value="$NormalMap1"/>
		<filter value="lll"/>
	</param>
	
	<param name="NormalSampler2" type="sampler2D">
		<texture value="$NormalMap2"/>
		<filter value="lll"/>
	</param>
	
	<param name="wavesSampler" type="sampler2D">
		<texture value="$WaveMap"/>
		<filter value="lll"/>
	</param>
	
	<param name="causticsSampler" type="sampler2D">
		<texture value="$CausticsMap"/>
		<filter value="lln"/>
	</param>
	
	<param name="causticsSequenceSampler" type="sampler2D">
		<texture value="$CausticsSequenceMap"/>
		<filter value="lln"/>
		<addressu value="wrap"/>
		<addressv value="wrap"/>
	</param>
	
	<param name="GlobalEnvSampler" type="samplerCUBE">
		<texture value="$EnvMapGlobal"/>
		<filter value="lln"/>
	</param>
	
	<param name="GlossSampler" type="sampler2D">
		<texture value="$GlossMap"/>
		<filter value="ppn"/>
		<addressu value="wrap"/>
		<addressv value="wrap"/>
	</param>
	
	<param name="FoamSampler" type="sampler2D">
		<texture value="$FoamMap"/>
		<filter value="lll"/>
		<addressu value="wrap"/>
		<addressv value="wrap"/>
	</param>
	
	<code><![CDATA[
		struct a2v
		{
			float4 position: POSITION;
			float2 texcoord: TEXCOORD0;
		};
		struct v2p
		{
			float4 position: POSITION;
			float4 uv: TEXCOORD0;
			float4 tex: TEXCOORD1;
			float3 worldPos: TEXCOORD2;
			float3 viewPos: TEXCOORD3;
			float4 waveTC : TEXCOORD4;
			float4 baseTC : TEXCOORD5;
			/*
			float3 lightViewRight : TEXCOORD5;
			float3 lightViewUp : TEXCOORD6;
			float3 lightViewDir : TEXCOORD7;
			*/			
		};
		
		void vs (in a2v IN, out v2p OUT)
		{
			OUT.position = mul(IN.position, MVP);
			OUT.uv.xy = (IN.texcoord + Time * Velocity.xy) * TextureScale.xy;
			OUT.uv.zw = (IN.texcoord + Time * Velocity.zw) * TextureScale.zw;
			OUT.tex = getTexCoordFromClipSpace (OUT.position);
	  
			float3 worldPos = mul(IN.position, World).xyz;
			OUT.worldPos = EyePos - worldPos;
			OUT.viewPos = mul(IN.position, WorldView).xyz;
			
			//--- wangjian added for caustic ---//
			float2 vProj = worldPos.xz * CausticParam.x;
			//float4 animCoeffs = float4((2.0h*0.01h*0.012h), (2.0h * 0.01h * 0.01h), (0.01h * 0.5h), (0.01h * 2.0h));
			float timefactor = Time * AnimCoeffs.z;
			float4 vAnimParams = float4( timefactor, -timefactor, timefactor, -timefactor );
			OUT.waveTC = vProj.xyxy * AnimCoeffs.xxyy + vAnimParams.xxyy;
			
			OUT.baseTC.xy = IN.texcoord;
			OUT.baseTC.zw = worldPos.xz;
			
			
			/*
			// Generate projection matrix based on sun direction  
			float3 dirZ = LightDir.xyz;
			float3 up = float3(0,1,0);
			float3 dirX = normalize( cross(up, dirZ) );
			float3 dirY = normalize( cross(dirZ, dirX) );
			OUT.lightViewRight = dirX;
			OUT.lightViewUp = dirY;
			OUT.lightViewDir = dirZ;
			*/
			//----------------------------------//
		}
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// get depth value
		float getDepth_Water (in float2 uv)
		{
			return tex2D(Gbuffer_DepthSampler, uv).r;
		}
		
		float4 ps_caustics_lowspec 	(	in v2p IN
							#if SUPPORT_SM30 && USE_Albedo_Encode
									,in float4 screenCoord : VPOS	// wangjian added
							#endif
							): COLOR0
		{			
			float4 waveTC = IN.waveTC;
			
		#if 0
			half3 causticMapR = 1.0;
			causticMapR.xy = tex2D(wavesSampler, waveTC.xy).rgb * 2.f - 1.f;
			causticMapR.xy += tex2D(wavesSampler, waveTC.wz).rgb * 2.f - 1.f;

			// Get main vectors/coeficients
			half3 normalVec = normalize( causticMapR );

			// todo : dispersion
			half3 caustics = half3( tex2D(causticsSampler, normalVec.yx * 0.5 + 0.5).xxx );										
			
			caustics = saturate( CausticParam.z * caustics - CausticParam.w );
			caustics = caustics * caustics;	
		
		#else
			
			half3 caustics = tex2D(causticsSequenceSampler, waveTC.xy).rrr;
			caustics = caustics * caustics;
			
		#endif
		
			float2 uv = IN.tex.xy/IN.tex.w;
			float depth = linearizeDepth ( getDepth_Water ( uv ) );
			
			caustics *= CausticParam.y * saturate( ( depth - IN.viewPos.z ) * Opacity );
					
			float factor = 1.0 - ( IN.viewPos.z - 200.0 ) / ( 500.0 - 200.0 );
			
			return float4( caustics.rgb, saturate( factor ) );
		}
		
		float4 ps_caustics_highspec (	in v2p IN
									#if SUPPORT_SM30 && USE_Albedo_Encode
										,in float4 screenCoord : VPOS	// wangjian added
									#endif
									): COLOR0
		{
			float2 uv = IN.tex.xy / IN.tex.w;
			
			float4 waveTC = IN.waveTC;
			
			float depth = linearizeDepth ( getDepth_Water ( uv ) );
		
			float3 eyeVec_WS = normalize( IN.worldPos );
			float3 position_WS = EyePos - eyeVec_WS * depth;
						
			//float3x3 mLightView;
			//mLightView[0] = normalize(IN.lightViewRight);
			//mLightView[1] = normalize(IN.lightViewUp);
			//mLightView[2] = normalize(IN.lightViewDir);
			//float3 vProj = mul(position_WS.xyz,mLightView) * CausticParam.x;
			
			float2 vProj = position_WS.xz * CausticParam.x;

			float timefactor = Time * AnimCoeffs.z;
			float4 vAnimParams = float4( timefactor, -timefactor, timefactor, -timefactor );
			
			waveTC = vProj.xyxy * AnimCoeffs.xxyy + vAnimParams.xxyy;
			
		#if 0
		
			half3 causticMapR = 1.0;
			causticMapR.xy = tex2D(wavesSampler, waveTC.xy /*+ wave.xy*/).rgb * 2.f - 1.f;
			causticMapR.xy += tex2D(wavesSampler, waveTC.wz /*+ wave.xy*/).rgb * 2.f - 1.f;

			// Get main vectors/coeficients
			half3 normalVec = normalize( causticMapR );

			// todo : dispersion
			half3 caustics = half3( tex2D(causticsSampler, normalVec.yx * 0.5 + 0.5).xxx );										
			
			caustics = saturate( CausticParam.z * caustics - CausticParam.w );
			caustics = caustics * caustics * caustics;
		
		#else
		
			half3 caustics;
			caustics.r = tex2D(causticsSequenceSampler, waveTC.xy).r;
			caustics.g = tex2D(causticsSequenceSampler, waveTC.xy * 0.9999).r;
			caustics.b = tex2D(causticsSequenceSampler, waveTC.xy * 0.9998).r;
			caustics = caustics * caustics * caustics;
			
		#endif
			
			float fresnelFactor = pow( saturate( dot( float3(0,1,0), eyeVec_WS ) ) , 2.0 );
			caustics *= CausticParam.y /** saturate( ( depth - IN.viewPos.z ) * Opacity )*/ * fresnelFactor;
						
			float factor = 1.0 - ( IN.viewPos.z - 100.0 ) / ( 300.0 - 100.0 );
			
			return float4( caustics.rgb, saturate( factor ) );
		}
		
		/*
		float4 ps_caustics_rain (	in v2p IN
									#if SUPPORT_SM30 && USE_Albedo_Encode
										,in float4 screenCoord : VPOS	// wangjian added
									#endif
									): COLOR0
		{
			float2 uv = IN.tex.xy / IN.tex.w;
			
			float4 waveTC = IN.waveTC;
			
			float depth = linearizeDepth ( getDepth_Water ( uv ) );
		
			float3 eyeVec_WS = normalize( IN.worldPos );
			float3 position_WS = EyePos - eyeVec_WS * depth;
			
			float2 vProj = position_WS.xz * CausticParam.x;
			
			float3 vNormal = float3( 0, 1 , 0 );
			
			float2 tcBase = position_WS.xz * rainPuddleParams.w;
		
			// Horizontal rain using wave propagation
			
			half2 cWaves = rainPuddleParams.z * ( tex2D( rainWavesSampler, tcBase + rainPuddleParams.xy * 0.005 ).xy * 2 - 1 );
			vNormal.xz += cWaves;

			vNormal.xyz = normalize( vNormal.xyz );
			
			//half NdotE = ( dot(vNormal.xyz, vEye.xyz) );
			//half OneMinusNdotE = saturate(1.h - NdotE);
			//half fFresnel = OneMinusNdotE * OneMinusNdotE * OneMinusNdotE;
			//half3 vReflectionWS = (2.h * NdotE * vNormal) - vEye.xyz;
			
			float3 half_vec = LightDir.xyz + vEye.xyz ;
			half_vec = float3(0,1,0);  //normalize( lerp( float3(0,1,0), half_vec, 0.5 ) );
			float spec = pow( saturate( dot( half_vec.xyz, vNormal.xyz ) ), 256 );
			
			half3 cRainLayer = saturate( dot( LightDir.xyz, vNormal.xyz) );
			
			const half3 suncolor = half3( 0.5,0.4,0.4 );
			const half sunMultiplier = 0.5;
			cRainLayer *= suncolor * sunMultiplier;
			const half3 skycolor = half3( 0.2,0.25,0.3 );
			const half  skyMultiplier = 0.75;
			
			const half distanceAtten = saturate( 1.0 - ( fViewVecLen - rainLayerParams.y ) / ( rainLayerParams.z - rainLayerParams.y ) );
			
			// fFresnel / distance attenuation / global density
			float horizonAttenFactor = 1.0; //saturate( dot( vEye.xyz, float3( 0,1,0 ) ) );
			cRainLayer = ( cRainLayer + skycolor * spec * skyMultiplier ) * horizonAttenFactor * distanceAtten * rainLayerParams.x;
			
			return float4( caustics.rgb, saturate( factor ) );
		}
		*/
		
		
		///////////////////////////////////////////////////////////////////////////////////////////////////
		
		float fresnelTerm(float3 normal, float3 eyeVec)
		{
			float angle = 1.0f - saturate(dot(normal, eyeVec));
			float fresnel = angle * angle;
			//fresnel = fresnel * fresnel;
			//fresnel = fresnel * angle;
			return fresnel;
		}
		
		//GLOBAL ENV MAPPING
		float3 GLOBALEM( in float3 refl, in samplerCUBE cubemap )
		{
			return texCUBE( cubemap, refl ).rgb;
		}
		
		void GenFoam( inout float3 waterCol, in float2 baseTC, in float3 normal, in float heightFactor )
		{
			// important step - use gloss map to break reflection repetitive look
			half4 cGlossMap = tex2D( GlossSampler, baseTC * 0.05 );
			//cGlossMap  = cGlossMap*1.4+0.3 ) * 2 - 1;
			
			// reuse gloss for masking edges
			half4 cFoamThreshold = cGlossMap * 1.4;// - 0.4;
	
			// FoamParams.x : FoamTilling
			float2 foamTC = baseTC * FoamParams.x;
			half fFoam = tex2D(FoamSampler, foamTC.xy + normal.xy *0.1 ).x;
			
			// FoamParams.z : FoamSoftIntersectionFactor
			half fFoamSoftIntersect = saturate( FoamParams.z * heightFactor );
			
			// Blend out edges in interesting way
			fFoam = fFoam * saturate( -fFoamSoftIntersect * ( 1 + cFoamThreshold.x ) + fFoam );
			fFoam *= saturate( fFoamSoftIntersect -  fFoamSoftIntersect * fFoamSoftIntersect );

			// FoamParams.y : FoamAmount
			fFoam *= FoamParams.y * saturate( heightFactor * FoamParams.w );

			waterCol += fFoam * FoamColor;
		}
		
		float4 WaterRLR( 	in float3 position_ws, 
							in float3 eyevec_ws, 
							in float3 reflect_ws,
							in float  depth,
							in float2 screenTC )
		{
		#if 1
		
			float4 result = 0;
			
			const half jitterOffsets[16] = {
				0.215168h, -0.243968h, 0.625509h, -0.623349h,
				0.247428h, -0.224435h, -0.355875h, -0.00792976h,
				-0.619941h, -0.00287403h, 0.238996h, 0.344431h,
				0.627993h, -0.772384h, -0.212489h, 0.769486h
			};
			
			const int numSamples = 24;
			const float vecLen = 20;
			const float borderSize = 0.15;  // Fade out at borders
			const float intervalSize = vecLen / (numSamples * 2) ;// / PS_NearFarClipDist.y;
			
			// get scene linear depth
			
			float3 viewVec = normalize( eyevec_ws );
			float3 reflVec = normalize( reflect_ws );
			float dirAtten = saturate( dot( -viewVec, reflVec ) );
			//clip( dirAtten - 0.001 );
			
			reflVec *= vecLen;
			
			float4 rayStart = mul( float4( position_ws, 1 ), mViewProj );
			float4 rayEnd 	= mul( float4( position_ws + reflVec, 1 ), mViewProj );

			// Compute linear z
			rayStart.z = depth;
			rayEnd.z = linearizeDepth( rayEnd.z / rayEnd.w );
			
			// Precomputation to reduce work in loop
			
			// screen space coordinates
			rayStart.xy = rayStart.xy * float2(0.5, -0.5) + 0.5 * rayStart.w;
			rayEnd.xy = rayEnd.xy * float2(0.5, -0.5) + 0.5 * rayEnd.w;
			
			float4 ray = rayEnd - rayStart;
			
			float2 jitterCoord = screenTC * 1.0 / InvScreenSize * 0.25f;
			const int jitterIndex = (int)dot( frac( jitterCoord ), float2( 4, 16 ) );
			const float jitter = jitterOffsets[jitterIndex] * 0.002;
			const float stepSize = 1.0 / numSamples;// + jitter;
			
			float len = 0;
			float bestLen = 0;
			float2 best_sc = 0;
			
			float reiterate = 0;
			
			float4 start_reiterate = rayStart;
			float4 end_reiterate = rayEnd;
			
			[loop]
			for( int i = 0; i < numSamples; ++i )
			{
				len += stepSize;
				
				// screen space ray search
				float4 projPos = rayStart + ray * len;
				end_reiterate = projPos;
				
				
				projPos.xy /= projPos.w;
				
				projPos.xy = saturate( projPos.xy );
				//if( projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 )
				//	break;
				
				
				
				// Use tex2Dlod because derivatives in loops with early out do not work
				//float fDepthTapBuf = tex2Dlod( _tex1, float4( projPos.xy, 0, 0 ) ).x;  // Linear depth
				float fDepthTapBuf = linearizeDepth( tex2Dlod( Gbuffer_DepthSampler, float4( projPos.xy, 0, 0 ) ).r );
				
				if( abs( fDepthTapBuf - projPos.z ) < intervalSize )
				{
					bestLen = len;
					best_sc = projPos.xy;
					break;
				}
				else if( ( projPos.z - fDepthTapBuf ) > intervalSize ) 
				{
					reiterate = 1.0f;
					break;
				}
				
				start_reiterate = end_reiterate;
			}
			
		#if 0
			// re-iteration
			if( reiterate > 0 )
			{
				return float4( 1,0,0,1);
				
				rayStart = start_reiterate;
				ray = end_reiterate - start_reiterate;
				len = 0;
				
				[loop]
				for( int i = 0; i < numSamples; ++i )
				{
					
					len += stepSize;
					
					// screen space ray search
					float4 projPos = rayStart + ray * len;
					projPos.xy /= projPos.w;
					
					projPos.xy = saturate( projPos.xy );
					//if( projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 )
					//	break;
					
					// Use tex2Dlod because derivatives in loops with early out do not work
					//float fDepthTapBuf = tex2Dlod( _tex1, float4( projPos.xy, 0, 0 ) ).x;  // Linear depth
					float fDepthTapBuf = linearizeDepth( tex2Dlod( Gbuffer_DepthSampler, float4( projPos.xy, 0, 0 ) ).r );
					
					if( abs( fDepthTapBuf - projPos.z ) < intervalSize )
					{
						bestLen = len;
						best_sc = projPos.xy;
						break;
					}
				}
			}
		#endif
			
			if( bestLen > 0 )
			{
			/*
				float4 bestSample = float4( position_ws + reflVec * bestLen, 1 );
			
				// Reprojection
				float4 reprojPos = mul( bestSample, g_mViewProjPrev );
				reprojPos.xyz /= reprojPos.w;
				reprojPos.xy = saturate(reprojPos.xy * float2(0.5, -0.5) + 0.5);
				
				OUT.Color.rgb = tex2D( _tex2, reprojPos.xy ).rgb;
			*/
			
				result.xyz = tex2Dlod( ShadedSceneSampler, float4( best_sc.xy, 0, 0 ) ).rgb;
				result.w = 1.0f;
				
				float borderDist = min( best_sc.x, best_sc.y );
				borderDist = min( 1 - max( best_sc.x, best_sc.y ), borderDist );
				float edgeWeight = borderDist > borderSize ? 1 : ( borderDist / borderSize ) * ( borderDist / borderSize );
				
			/*
				float strength = pow( vNormal.w, SSReflParams.y );
				//float strength = saturate( vNormal.w * SSReflParams.y );
				OUT.Color.a = edgeWeight * strength;
				
				// Apply distance attenuation
				//OUT.Color.a *= sqrt( saturate( 1 - bestLen ) );
				
				// Fade out in reflections directions where less information is available
				OUT.Color.a *= dirAtten;
			*/
			
				//result *= edgeWeight * ( dirAtten );
			}
			
		#else
		
			float4 result = 0;
			
			const half jitterOffsets[16] = {
				0.215168h, -0.243968h, 0.625509h, -0.623349h,
				0.247428h, -0.224435h, -0.355875h, -0.00792976h,
				-0.619941h, -0.00287403h, 0.238996h, 0.344431h,
				0.627993h, -0.772384h, -0.212489h, 0.769486h
			};
			
			const int numSamples = 24;
			
		#endif
			
			return result;
		}
		
		float4 ps 	(	in v2p IN
					#if SUPPORT_SM30 && USE_Albedo_Encode
						,in float4 screenCoord : VPOS	// wangjian added
					#endif
					): COLOR0
		{
			float3 normal1 	= tex2D(NormalSampler1, IN.uv.xy).rgb * 2.f - 1.f;
			float3 normal2 	= tex2D(NormalSampler2, IN.uv.zw).rgb * 2.f - 1.f;
			float3 normal 	= normal1 + normal2;
			normal 			*= float3(1.f, 1.f, normalScale);
			normal 			= normalize(normal);
			
			float4 uv2 = IN.tex;
			
			// fixed some issue :
			// 1> if the depth of uv offset is less then me, then the neighbor is not refraction so skip it.
			// 2> use correct uv to evaluate the dist of world space position
			
			float temp = 1.0 / uv2.w;
			float depth_offset = linearizeDepth ( getDepth_Water ( ( uv2.xy + normal.xy * distortion ) * temp ) );
			uv2.xy += step( IN.viewPos.z, depth_offset ) * normal.xy * distortion;
			
			//uv2.xy += normal.xy * distortion;
			float2 tcoord = uv2.xy * temp;
			
			float3 refraction = tex2D(ShadedSceneSampler, tcoord ).rgb;
			
			// use depth to calc depth attenuation
			float depth = linearizeDepth ( getDepth_Water ( tcoord ) ) - IN.viewPos.z;
			float depthfactor = saturate( depth * Opacity );
					
			float3 waterCol = lerp( refraction, SurfaceColor, depthfactor );
			
			float3 eyeVec = normalize( IN.worldPos );
			float h = depth * eyeVec.y;
			
			waterCol = lerp(waterCol, DepthColor, saturate(h/Extinction));
			
			float fresnel = fresnelTerm( normal.yzx, eyeVec );
			
			// world space reflection vector
			float3 refl = reflect( -eyeVec, normal.yzx );
			
			float3 EnvColor = GLOBALEM(refl,GlobalEnvSampler);
			float3 refl_clr = EnvColor * ReflectColor * ReflectScale;
			
			waterCol = lerp(waterCol, refl_clr, fresnel * saturate( depth / 10.0 ));
		
			return float4(waterCol.rgb, 0.0);
		}
		
		float4 ps_highspec 	(	in v2p IN
							#if SUPPORT_SM30 && USE_Albedo_Encode
								,in float4 screenCoord : VPOS	// wangjian added
							#endif
							): COLOR0
		{
			float3 normal1 	= tex2D(NormalSampler1, IN.uv.xy).rgb * 2.f - 1.f;
			float3 normal2 	= tex2D(NormalSampler2, IN.uv.zw).rgb * 2.f - 1.f;
			float3 normal 	= normal1 + normal2;
			normal 			*= float3(1.f, 1.f, normalScale);
			normal 			= normalize(normal);
			
			float4 uv2 = IN.tex;
			
			// fixed some issue :
			// 1> if the depth of uv offset is less then me, then the neighbor is not refraction so skip it.
			// 2> use correct uv to evaluate the dist of world space position
			
			float temp = 1.0 / uv2.w;
			float depth_offset = linearizeDepth ( getDepth_Water ( ( uv2.xy + normal.xy * distortion ) * temp ) );
			uv2.xy += step( IN.viewPos.z, depth_offset ) * normal.xy * distortion;
			
			//uv2.xy += normal.xy * distortion;
			float2 tcoord = uv2.xy * temp;
			
			float3 refraction = tex2D(ShadedSceneSampler, tcoord ).rgb;
			
			// use depth to calc depth attenuation
			float depth = linearizeDepth ( getDepth_Water ( tcoord ) ) - IN.viewPos.z;
			float depthfactor = saturate( depth * Opacity );
					
			float3 eyeVec = normalize( IN.worldPos );
			float fresnel = fresnelTerm( normal.yzx, eyeVec );
			
			//refraction *= pow( ( 1.0 - fresnel ), 2 );
			float3 waterCol = lerp( refraction , SurfaceColor, depthfactor );
			
			float h = depth * eyeVec.y;
			
			waterCol = lerp( waterCol, DepthColor, saturate( h / Extinction) );
			
			// world space reflection vector
			float3 refl = reflect( -eyeVec, /*float3( 0,1,0)*/normal.yzx );
			
			float3 EnvColor = GLOBALEM(refl,GlobalEnvSampler);
			
		#if 1
			float3 refl_clr = EnvColor * ReflectColor * ReflectScale;
		#else
			float4 reflection = WaterRLR( 	EyePos - IN.worldPos,
											eyeVec, 
											refl, 
											IN.viewPos.z, 
											IN.tex.xy/IN.tex.w	);
			float3 refl_clr = reflection.w > 0 ? reflection.rgb : EnvColor;
			refl_clr *= ReflectColor * ReflectScale;
		#endif
			
			waterCol = lerp(waterCol, refl_clr, fresnel * saturate( depth / 10.0 ) );
			
			GenFoam( waterCol, IN.baseTC.xy, normal, h );
			
			return float4( waterCol.rgb, 0.0f );
		}
		
		void RainLayer( inout float3 color, in float2 tcBase, in float3 vEye, in float fViewVecLen, in float attenation )
		{
			float3 vNormal = float3( 0, 1 , 0 );
			
			tcBase = tcBase * rainPuddleParams.w;
		
			// Horizontal rain using wave propagation
			
			half2 cWaves = rainPuddleParams.z * ( tex2D( rainWavesSampler, tcBase + rainPuddleParams.xy * 0.005 ).xy * 2 - 1 );
			vNormal.xz += cWaves;

			vNormal.xyz = normalize( vNormal.xyz );
			
			//half NdotE = ( dot(vNormal.xyz, vEye.xyz) );
			//half OneMinusNdotE = saturate(1.h - NdotE);
			//half fFresnel = OneMinusNdotE * OneMinusNdotE * OneMinusNdotE;
			//half3 vReflectionWS = (2.h * NdotE * vNormal) - vEye.xyz;
			
			float3 half_vec = LightDir.xyz + vEye.xyz ;
			half_vec = float3(0,1,0);  //normalize( lerp( float3(0,1,0), half_vec, 0.5 ) );
			float spec = pow( saturate( dot( half_vec.xyz, vNormal.xyz ) ), 256 );
			
			half3 cRainLayer = saturate( dot( LightDir.xyz, vNormal.xyz) );
			
			const half3 suncolor = half3( 0.5,0.4,0.4 );
			const half sunMultiplier = 0.5;
			cRainLayer *= suncolor * sunMultiplier;
			const half3 skycolor = half3( 0.2,0.25,0.3 );
			const half  skyMultiplier = 0.75;
			
			const half distanceAtten = saturate( 1.0 - ( fViewVecLen - rainLayerParams.y ) / ( rainLayerParams.z - rainLayerParams.y ) );
			
			// fFresnel / distance attenuation / global density
			float horizonAttenFactor = 1.0; //saturate( dot( vEye.xyz, float3( 0,1,0 ) ) );
			cRainLayer = ( cRainLayer + skycolor * spec * skyMultiplier ) * horizonAttenFactor * distanceAtten * rainLayerParams.x * attenation;
			
			color += cRainLayer * rainPuddleIntensity;
		}
		
		float4 ps_highspec_rain (	in v2p IN
								#if SUPPORT_SM30 && USE_Albedo_Encode
									,in float4 screenCoord : VPOS	// wangjian added
								#endif
								): COLOR0
		{
			float3 normal1 	= tex2D(NormalSampler1, IN.uv.xy).rgb * 2.f - 1.f;
			float3 normal2 	= tex2D(NormalSampler2, IN.uv.zw).rgb * 2.f - 1.f;
			float3 normal 	= normal1 + normal2;
			normal 			*= float3(1.f, 1.f, normalScale);
			normal 			= normalize(normal);
			
			float4 uv2 = IN.tex;
			
			// fixed some issue :
			// 1> if the depth of uv offset is less then me, then the neighbor is not refraction so skip it.
			// 2> use correct uv to evaluate the dist of world space position
			
			float temp = 1.0 / uv2.w;
			float depth_offset = linearizeDepth ( getDepth_Water ( ( uv2.xy + normal.xy * distortion ) * temp ) );
			uv2.xy += step( IN.viewPos.z, depth_offset ) * normal.xy * distortion;
			
			//uv2.xy += normal.xy * distortion;
			float2 tcoord = uv2.xy * temp;
			
			float3 refraction = tex2D(ShadedSceneSampler, tcoord ).rgb;
			
			// use depth to calc depth attenuation
			float depth = linearizeDepth ( getDepth_Water ( tcoord ) ) - IN.viewPos.z;
			float depthfactor = saturate( depth * Opacity );
					
			float3 eyeVec = normalize( IN.worldPos );
			float fresnel = fresnelTerm( normal.yzx, eyeVec );
			
			//refraction *= pow( ( 1.0 - fresnel ), 2 );
			float3 waterCol = lerp( refraction , SurfaceColor, depthfactor );
			
			float h = depth * eyeVec.y;
			
			waterCol = lerp( waterCol, DepthColor, saturate( h / Extinction) );
			
			// world space reflection vector
			float3 refl = reflect( -eyeVec, /*float3( 0,1,0)*/normal.yzx );
			
			float3 EnvColor = GLOBALEM(refl,GlobalEnvSampler);
			
		#if 1
			float3 refl_clr = EnvColor * ReflectColor * ReflectScale;
		#else
			float4 reflection = WaterRLR( 	EyePos - IN.worldPos,
											eyeVec, 
											refl, 
											IN.viewPos.z, 
											IN.tex.xy/IN.tex.w	);
			float3 refl_clr = reflection.w > 0 ? reflection.rgb : EnvColor;
			refl_clr *= ReflectColor * ReflectScale;
		#endif
			
			waterCol = lerp(waterCol, refl_clr, fresnel * saturate( depth / 10.0 ) );
			
			GenFoam( waterCol, IN.baseTC.xy, normal, h );
			
			RainLayer( waterCol, IN.baseTC.zw, eyeVec, IN.viewPos.z, saturate( depth / 10.0 ) ); 
			
			return float4( waterCol.rgb, 0.0);
		}
		
		/////////////////////////////////////////////////////////////////////////////////////////////
		
		struct a2v_fs
		{
			float4 position: POSITION;
			float2 texcoord: TEXCOORD0;
		};
		struct v2p_fs
		{
			float4 position	: POSITION;
			float4 uv		: TEXCOORD0;
			float3 worldPos	: TEXCOORD1;
			float4 fog		: TEXCOORD2;
		};
		
		void vs_fs (in a2v_fs IN, out v2p_fs OUT)
		{
			OUT.position 	= mul(IN.position, MVP);
			OUT.uv.xy 		= (IN.texcoord + Time * Velocity.xy) * TextureScale.xy;
			OUT.uv.zw 		= (IN.texcoord + Time * Velocity.zw) * TextureScale.zw;
	  
			float3 worldPos = mul(IN.position, World).xyz;
			OUT.worldPos 	= EyePos - worldPos;
			
			OUT.fog			= CalcFog(OUT.position.w);
		}
		
		///////////////////////////////////////////////////////////////////////////////////////////////////
		
		float fresnelTerm_fs(float3 normal, float3 eyeVec)
		{
			float angle = 1.0f - saturate(dot(normal, eyeVec));
			float fresnel = angle * angle;
			//fresnel = fresnel * fresnel;
			//fresnel = fresnel * angle;
			return fresnel;
		}
		
		float4 ps_fs 	(	in v2p_fs IN	): COLOR0
		{
			float3 normal1 	= tex2D(NormalSampler1, IN.uv.xy).rgb * 2.f - 1.f;
			float3 normal2 	= tex2D(NormalSampler2, IN.uv.zw).rgb * 2.f - 1.f;
			float3 normal 	= normal1 + normal2;
			normal 			*= float3(1.f, 1.f, normalScale);
			normal 			= normalize(normal);
			
			float depthfactor = saturate( Opacity );
			float3 waterCol = SurfaceColor;				//lerp( refraction, SurfaceColor, depthfactor );
			
			float3 eyeVec = normalize( IN.worldPos );
			float h = eyeVec.y;
			
			waterCol = lerp(waterCol, DepthColor, saturate(0.3/Extinction));
			
			float fresnel = fresnelTerm_fs( normal.yzx, eyeVec );
			
			// world space reflection vector
			float3 refl = reflect( -eyeVec, normal.yzx );
			
			float3 EnvColor = texCUBE( GlobalEnvSampler, refl ).rgb;
			float3 refl_clr = EnvColor * ReflectColor * ReflectScale;
			
			waterCol = lerp(waterCol, refl_clr, fresnel);
		
			float4 color = float4(waterCol.rgb, 0.25 );
			
			ApplyFog( color, IN.fog );
			
			return color;
		}
		
	]]></code>
	
	<effect name="genCaustics" scheme="deferred" schemelayer="Shading">
		<!--
		<requirements>
			<eq param="disableCaustics" value="0"/>
		</requirements>
		-->
		<pass>
			<streamdefine>
				<stream semantec="position"/>
			</streamdefine>
			<depth_state>
				<zwrite value="false"/>
			</depth_state>
			<alphablend_state>
				<enable value="true"/>
				<srcblend value="srcalpha"/>
				<destblend value="one"/>
			</alphablend_state>
			<vertexshader entry="vs" target="vs_3_0"/>
			<pixelshader entry="ps_caustics_highspec" target="ps_3_0" />
		</pass>
	</effect>
	
	<effect name="default" scheme="deferred" schemelayer="solidForward">
		<!--
		<requirements>
			<ne param="enableRainLayer" value="1"/>
			<ne param="enableFoam" value="1"/>
		</requirements>
		-->
		<pass>
			<streamdefine>
				<stream semantec="position"/>
			</streamdefine>
			<depth_state>
				<zwrite value="false"/>
			</depth_state>
			<vertexshader entry="vs" target="vs_2_0"/>
			<pixelshader entry="ps" target="ps_2_0" />
		</pass>
	</effect>
	
	<effect name="default_highspec_rain" scheme="deferred" schemelayer="solidForward">
		<!--
		<requirements>
			<ne param="enableRainLayer" value="0"/>
		</requirements>
		-->
		<pass>
			<streamdefine>
				<stream semantec="position"/>
			</streamdefine>
			<depth_state>
				<zwrite value="false"/>
			</depth_state>
			<vertexshader entry="vs" target="vs_3_0"/>
			<pixelshader entry="ps_highspec_rain" target="ps_3_0" />
		</pass>
	</effect>
	
	<effect name="default_highspec" scheme="deferred" schemelayer="solidForward">
		<!--
		<requirements>
			<ne param="enableRainLayer" value="1"/>
			<ne param="enableFoam" value="0"/>
		</requirements>
		-->
		<pass>
			<streamdefine>
				<stream semantec="position"/>
			</streamdefine>
			<depth_state>
				<zwrite value="false"/>
			</depth_state>
			<vertexshader entry="vs" target="vs_3_0"/>
			<pixelshader entry="ps_highspec" target="ps_3_0" />
		</pass>
	</effect>
	
	
	
	
	<effect name="default_fs" scheme="custom" schemelayer="SolidTransparent">
		<pass>
			<streamdefine>
				<stream semantec="position"/>
			</streamdefine>
			<depth_state>
				<zwrite value="false"/>
			</depth_state>
			<alphablend_state>
                <enable value="true" />
                <srcblend value="srcalpha" />
                <destblend value="invsrcalpha" />
            </alphablend_state>
			<vertexshader entry="vs_fs" target="vs_2_0"/>
			<pixelshader entry="ps_fs" target="ps_2_0" />
		</pass>
	</effect>
	
</material>